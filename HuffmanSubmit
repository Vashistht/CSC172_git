import java.io.File;
import java.io.FileNotFoundException;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.HashMap;
import java.io.FileWriter; 
import java.io.IOException;

class Node implements Comparable<Node>{
	String binString;
	Integer freq;
	Node left = null;
	Node right = null;

	Node(String binString, Integer freq){ //Constructor
		this.binString = binString;
		this.freq = freq;
	}

	Node(Integer freq, Node left, Node right){ //Constructor
		this.binString = null;
		this.freq = freq;
		this.left = left;
		this.right = right;
	}

	public int compareTo(Node n){ //Compare frequencies to organize priority queue from lowest to highest
		if(this.freq < n.freq){ //If frequency of node is higher, we consider this node "less" in comparison
            return -1;
        } else if (this.freq > n.freq){ //If frequency of node is lower, we consider this node "greater" in comparison
            return 1;
        } else
            return 0;
	}

	public boolean isLeaf() {
		if ((this.left == null) && (this.right == null)) {
			return true;
		} else {
			return false;
		}
	}
}


public class HuffmanSubmit implements Huffman {
	HashMap<String, Integer> frequencies = new HashMap<String, Integer>(); //Creates Hashmap of frequencies
	HashMap<String, String> huffmanCodes = new HashMap<String, String>(); //Creates Hashmap of Huffman Codes
  
	public void createFreqFile(String inputFile, String freqFile) throws FileNotFoundException { //Create frequency file
		File myInputFile = new File(inputFile); //Create file object for inputFile

		BinaryIn  in  = new BinaryIn(inputFile);

		while (!in.isEmpty()){
			char c = in.readChar();
			String charBin = Integer.toBinaryString(c);
			if (frequencies.containsKey(charBin) == true){
				frequencies.put(charBin, frequencies.get(charBin) + 1);
			} else {
				frequencies.put(charBin, 1);
			}
		}

		try {
			FileWriter myWriter = new FileWriter(freqFile);
			for (String i : frequencies.keySet()){
				myWriter.write(i);
				myWriter.write(":");
				myWriter.write(String.valueOf(frequencies.get(i)));
				myWriter.write("\n");
			}
			myWriter.close();
		} catch (IOException e) {
			//
		}
	}

	public void createHuffmanTree(PriorityQueue<Node> PQ){
		Node node1 = PQ.poll();
		Node node2 = PQ.poll();

		Node combinedNode = new Node(node1.freq + node2.freq, node1, node2);
		PQ.add(combinedNode);
	}

	public HashMap<String, String> putCodesInHash(Node node, String huffmanCode){
		if (node == null){
			return huffmanCodes;
		}

		//Potential bug
		if (node.isLeaf()){ 
			huffmanCodes.put(node.binString, huffmanCode);
			//System.out.println("Huffman Code for " + node.binString + " is " + huffmanCode);
		} else {
			putCodesInHash(node.left, huffmanCode.concat("0"));
			putCodesInHash(node.right, huffmanCode.concat("1"));
		}

		return huffmanCodes;
	}

	public void createHuffmanTree(){
		PriorityQueue<Node> PQ = new PriorityQueue<>();
		
		for (String i : frequencies.keySet()){
			Node charFreq = new Node(i, frequencies.get(i));
			PQ.add(charFreq);
		}

		while (PQ.size() > 1){
			createHuffmanTree(PQ);
		}

		Node HuffmanTree = PQ.poll();
		putCodesInHash(HuffmanTree, "");
	}

	public void createOutputFile(String inputFile, String outputFile) throws FileNotFoundException{
		File myInputFile = new File(inputFile); //Create file object for inputFile
		BinaryIn in = new BinaryIn(inputFile);

		BinaryOut out = new BinaryOut(outputFile);
		while (!in.isEmpty()){
			char c = in.readChar();
			String charBin = Integer.toBinaryString(c);
			out.write(huffmanCodes.get(charBin));
		}
		out.close();
	}
 
	public void encode(String inputFile, String outputFile, String freqFile){
		try {
			createFreqFile(inputFile, freqFile);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		createHuffmanTree();

		try {
			createOutputFile(inputFile, outputFile);
		} catch (FileNotFoundException e) {
			//
		}
   }


   public void decode(String inputFile, String outputFile, String freqFile){
		BinaryIn in = new BinaryIn(inputFile);
		
   }




   public static void main(String[] args) {
      Huffman  huffman = new HuffmanSubmit();
		huffman.encode("ur.jpg", "ur.enc", "freq.txt");
		//huffman.decode("ur.enc", "ur_dec.jpg", "freq.txt");
		// After decoding, both ur.jpg and ur_dec.jpg should be the same. 
		// On linux and mac, you can use `diff' command to check if they are the same. 
		//System.out.println("hi");
   }

}
